clear all
order = 2;
fs = 400;
fc = 40;
fnorm = fc*2/fs;
dt = 1/fs;
t1 = 0.1;
t0 = 0;
t = t0:dt:t1;
num_samples = (t1-t0)/dt;

%input
u = [ones(num_samples+1,1)';3.*ones(num_samples+1,1)';-2.*ones(num_samples+1,1)';cos(-10.*t)];
u(:,1) = 0;
u = u';

%ideal coeffs
[b,a] = butter(order,fnorm);

%MCMC part

% Ideal output
D = filter(b,a,u);

%First guess at parameters
b_curr = rand(1,order+1);
a_curr = rand(1,order+1);

%set the first a coeff to 1
a_curr(1) = a(1);

%set best to current
b_best = b_curr;
a_best = a_curr;

%make coeff arrays
coeffs = [b a];
coeffs_curr = [b_curr a_curr];
coeffs_best = [b_best a_best];


%output with current coeff values
y_curr = filter(b_curr,a_curr,u);
y_best = y_curr;

%error function
err_curr = calc_error(D,y_curr,num_samples);
err_best = calc_error(D,y_best,num_samples);

%define stop flag
flg = 0;

%MCMC Part

%Cooling setup
Tc = calc_error(D,y_curr,num_samples);
Ti = ones(1,2*(order+1));
kc = 0;
ki = zeros(1,2*(order+1));

%Iteration Setup
N_accept = 10;
N_gen = 1000;

%set upper and lower bounds
U = 3;
V = -3;


    for nn = 1:N_accept
        %generate new neighbour
        for ii = 1:2*(order+1)
            u_i = rand;
            g(ii) = sign(u_i-0.5)*Ti(ki(ii)+1)*((1 + 1/Ti(ki(ii)+1))^(abs(2*u_i-1))-1);       
        end

        coeffs_cand = coeffs_curr + (U-V).*g;
        b_cand = coeffs_cand(1:order+1)
        a_cand = coeffs_cand(order+1:2*(order+1));
        y_cand = filter(b_cand,a_cand,u);

        err_curr = calc_error(D,y_curr,num_samples);
        err_cand = calc_error(D,y_cand,num_samples);

        P_accept = 1/(1 + exp(err_cand - err_curr) / Tc(kc+1));
        P_unif = rand;

        if(P_unif <= P_accept)
            if(err_cand < err_best)
                
                coeffs_best = coeffs_cand;
                b_best = coeffs_best(1:order+1)
                a_best = coeffs_best(order+1:2*(order+1));                
                y_best = filter(b_best,a_best,u);
                
            end
            coeffs_curr = coeffs_cand;
            accepted = accepted+1;
        end
        
        %calculate sensitivities
        
        for ii = 1:2*(order+1)
            
            coeffs_test(ii) = coeffs_best(ii) + min_step;
            b_test = coeffs_test(1:order+1)
            a_test = coeffs_test(order+1:2*(order+1));
            y_test = filter(b_test,a_test,u);
            
            err1 = calc_error(D,y_test,num_samples);
            err2 = calc_error(D,y_best,num_samples);
            
            sens(ii) = 1/min_step*abs(err1-err2);
        end
        
        for ii 1:2*(order+1)
            Ti(ki(ii)+1) = max(sens)/sens(ii)*Ti(ki(ii)+1);
            ki(ii) = -1/c * log(Tc)
        end
    end
   


